@page "/partners"

@using Services
@using Models 

@inject IPartnerService _partnerService

<div class="container-fluid" style="position: relative">
    <RadzenCard Visible=@isBusy style="z-index: 1; text-align: center; position: absolute; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0, 0, 0, .5)">
        <RadzenCard style="margin: 32px auto; width: 80%; top: 50%;">
            Loading...
        </RadzenCard>
    </RadzenCard>

    <RadzenButton Icon="add_circle_outline" style="margin-bottom: 10px" Text="Add" Click="@InsertRow" />
    <RadzenGrid @ref="grid" Data="@partners" AllowSorting="true" AllowFiltering="true" AllowPaging="true" PageSize="20"
                TItem="Partner" ColumnWidth="200px" EditMode="DataGridEditMode.Single"
                RowUpdate="@OnUpdateRow" RowCreate="@OnCreateRow" AllowColumnResize="true">
        <Columns>
            <RadzenGridColumn TItem="Partner" Property="Id" Title="Id"/>
            <RadzenGridColumn TItem="Partner" Property="Name" Title="Name">
                <EditTemplate Context="partner">
                    <RadzenTextBox @bind-Value="@partner.Name" Style="width:100%" />
                </EditTemplate>
            </RadzenGridColumn>
            <RadzenGridColumn TItem="Partner" Property="IsActive" Title="Active">
                <EditTemplate Context="partner">
                    <RadzenSwitch @bind-Value="@partner.IsActive" Style="width:100%"/>
                </EditTemplate>
            </RadzenGridColumn>
            <RadzenGridColumn TItem="Partner" Property="Type" Title="Type" >
                <EditTemplate Context="partner">
                    <RadzenDropDown Data="@_partnerTypes" @bind-Value="partner.Type" AllowClear="true" AllowFiltering="true" 
                                    FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                    FilterOperator="StringFilterOperator.Contains" />
                </EditTemplate>
            </RadzenGridColumn>         
            <RadzenGridColumn TItem="Partner" Title="Edit" Bubble="false" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="50px">
                <Template Context="partner">
                    <RadzenButton Icon="edit" Size="ButtonSize.Small" Click="@(args => EditRow(partner))">
                    </RadzenButton>
                </Template>
                <EditTemplate Context="partner">
                    <RadzenButton Icon="save" Size="ButtonSize.Small" Click="@((args) => SaveRow(partner))">
                    </RadzenButton>
                    <RadzenButton Icon="cancel" Size="ButtonSize.Small" ButtonStyle="ButtonStyle.Secondary" Click="@((args) => CancelEdit(partner))">
                    </RadzenButton>
                </EditTemplate>
            </RadzenGridColumn>
            <RadzenGridColumn TItem="Partner" Title="Delete" Context="partner" Bubble="false" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="50px">
                <Template Context="partner">
                    <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="close" Size="ButtonSize.Small" Click="@(args => DeleteRow(partner))">
                    </RadzenButton>
                </Template>
                <EditTemplate Context="partner">
                    <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="close" Size="ButtonSize.Small" Click="@(args => DeleteRow(partner))">
                    </RadzenButton>
                </EditTemplate>
            </RadzenGridColumn>
        </Columns>
    </RadzenGrid>
</div>
@code {
    RadzenGrid<Partner> grid;
    IList<Partner> partners;
    bool isBusy;

    IEnumerable<PartnerTypeEnum> _partnerTypes;

    protected override async Task OnInitializedAsync()
    {
        isBusy = true;
        var partnersResult = await _partnerService.GetAsync();
        if(partnersResult.ResponseType == ErrorTypeEnum.Success)
        {
            partners = partnersResult.Content.ToList();
        }

        _partnerTypes = Enum.GetValues(typeof(PartnerTypeEnum)).Cast<PartnerTypeEnum>();

        isBusy = false;
    }

    //Edit methods

    void EditRow(Partner partner)
    {
        grid.EditRow(partner);
    }

    async void OnUpdateRow(Partner partner)
    {
        isBusy = true;
        await _partnerService.UpdateAsync(partner);
        isBusy = false;
    }

    void SaveRow(Partner partner)
    {
        grid.UpdateRow(partner);
    }

    void CancelEdit(Partner partner)
    {
        grid.CancelEditRow(partner);
    }

    async void DeleteRow(Partner partner)
    {
        if (partners.Contains(partner))
        {
            isBusy = true;
            await _partnerService.DeleteAsync(partner);
            isBusy = false;

            grid.Reload();
        }
        else
        {
            grid.CancelEditRow(partner);
        }
    }

    void InsertRow()
    {
        grid.InsertRow(new Partner());
    }

    async void OnCreateRow(Partner partner)
    {
        isBusy = true;
        await _partnerService.InsertAsync(partner);
        isBusy = false;
    }
}
