@page "/web-services"

@using Services
@using Models 
@using Helpers

@inject IWebServiceService _webServiceService

<div class="container-fluid" style="position: relative">
    <RadzenCard Visible=@isBusy style="z-index: 1; text-align: center; position: absolute; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0, 0, 0, .5)">
        <RadzenCard style="margin: 32px auto; width: 80%; top: 50%;">
            Loading...
        </RadzenCard>
    </RadzenCard>

    <Radzen.Blazor.GridColumnVisibilityChooser.RadzenGridColumnVisibilityChooser Grid="@grid"GetDefaultVisibility="@GetDefaultColumnVisibility" Placeholder="Pasirinkite stulpelius" 
                                                                                 RefreshParentStateAction="@(() => InvokeAsync(StateHasChanged))"/>

    <RadzenButton Icon="add_circle_outline" style="margin-bottom: 10px" Text="Pridėti web servisą" Click="@InsertRow" />
    <RadzenGrid @ref="@grid" Data="@webServices" AllowSorting="true" AllowFiltering="true" AllowPaging="true" PageSize="20"
                TItem="WebService" ColumnWidth="120px" EditMode="DataGridEditMode.Single"
                RowUpdate="@OnUpdateRow" RowCreate="@OnCreateRow" AllowColumnResize="true"
                ExpandMode="DataGridExpandMode.Single" RowExpand="@((args) => _currentWebService = args)" >  
        <Template Context="webService">
            <RadzenButton Icon="add_circle_outline" style="margin-bottom: 10px" Text="Pridėti savybę" Click="@(() => InsertQoSRow())" />
            <RadzenGrid @ref="QoSGrid" Data="@webService.QoSParameters" AllowSorting="true" AllowFiltering="true" AllowPaging="true" PageSize="20"
                        TItem="WebServiceQoSParameter" ColumnWidth="150px" EditMode="DataGridEditMode.Single" AllowColumnResize="true">
                <Columns>
                    <RadzenGridColumn TItem="WebServiceQoSParameter" Property="Name" Title="Savybė">
                        <Template Context="QoSParameter">
                            @QoSParameter.NormalizedName
                        </Template>
                        <EditTemplate Context="QoSParameter">
                            <RadzenDropDown Placeholder="Select name" AllowFiltering="true" ValueProperty="Name" Value="@QoSParameter.Name"
                                            Data="@webServiceQoS.Where(x => x.WebServiceType == webService.Type).ToList()"
                                            TextProperty="NormalizedName" ValueChanged="@((WebServiceQoS args) => { QoSParameter.Name = args.Name; QoSParameter.Type = args.Type; QoSParameter.Importance = args.Importance; })"/>
                        </EditTemplate>
                    </RadzenGridColumn>
                    <RadzenGridColumn TItem="WebServiceQoSParameter" Property="Value" Title="Įvertis">
                        <Template Context="QoSParameter">
                            @(QoSParameter.Value == "true" || QoSParameter.Value == "false" ? (QoSParameter.Value == "true" ? "Taip" : "Ne") : QoSParameter.Value)
                        </Template>
                        <EditTemplate Context="QoSParameter">
                            <RadzenTextBox Placeholder="Enter value" @bind-Value="@QoSParameter.Value" />
                        </EditTemplate>
                    </RadzenGridColumn>
                    <RadzenGridColumn TItem="WebServiceQoSParameter" Title="Redaguoti" Bubble="false" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="50px">
                        <Template Context="QoSParameter">
                            <RadzenButton Icon="edit" Size="ButtonSize.Small" Click="@(args => EditQoSRow(QoSParameter))">
                            </RadzenButton>
                        </Template>
                        <EditTemplate Context="QoSParameter">
                            <RadzenButton Icon="save" Size="ButtonSize.Small" Click="@((args) => SaveRow(_currentWebService))">
                            </RadzenButton>
                            <RadzenButton Icon="cancel" Size="ButtonSize.Small" ButtonStyle="ButtonStyle.Secondary" Click="@((args) => CancelQoSEdit(QoSParameter))">
                            </RadzenButton>
                        </EditTemplate>
                    </RadzenGridColumn>
                    <RadzenGridColumn TItem="WebServiceQoSParameter" Title="Pašalinti" Context="QoSParameter" Bubble="false" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="50px">
                        <Template Context="QoSParameter">
                            <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="close" Size="ButtonSize.Small" Click="@(args => DeleteQoSRow(QoSParameter))">
                            </RadzenButton>
                        </Template>
                        <EditTemplate Context="QoSParameter">
                            <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="close" Size="ButtonSize.Small" Click="@(args => DeleteQoSRow(QoSParameter))">
                            </RadzenButton>
                        </EditTemplate>
                    </RadzenGridColumn>
                </Columns>
            </RadzenGrid>
        </Template>
        <Columns>
            <RadzenGridColumn TItem="WebService" Property="Id" Title="Nr." Width="60px" />
            <RadzenGridColumn TItem="WebService" Property="Name" Title="Pavadinimas" Width="150px">
                <EditTemplate Context="webService">
                    <RadzenTextBox @bind-Value="@webService.Name" Style="width:100%" />
                </EditTemplate>
            </RadzenGridColumn>
            <RadzenGridColumn TItem="WebService" Property="Type" Title="Tipas" Width="200px">
                <Template Context="webService">
                    @EnumHelpers.GetDisplayName(webService.Type)
                </Template>
                <EditTemplate Context="webService">
                    <RadzenDropDown Data="@_webServiceTypes" @bind-Value="webService.Type" AllowClear="true" AllowFiltering="true"
                                    FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" ValueProperty="Key"
                                    FilterOperator="StringFilterOperator.Contains" TextProperty="Value" />
                </EditTemplate>
            </RadzenGridColumn>
            <RadzenGridColumn TItem="WebService" Property="IsActive" Title="Aktyvus" Width="80px">
                <Template Context="webService">
                    @(webService.IsActive ? "Taip" : "Ne")
                </Template>
                <EditTemplate Context="webService">
                    <RadzenSwitch @bind-Value="@webService.IsActive" Style="width:100%" />
                </EditTemplate>
            </RadzenGridColumn>
            <RadzenGridColumn TItem="WebService" Property="Url" Title="Nuoroda" Width="200px">
                <EditTemplate Context="webService">
                    <RadzenTextBox @bind-Value="@webService.Url" Style="width:100%" />
                </EditTemplate>
            </RadzenGridColumn>
            <RadzenGridColumn TItem="WebService" Property="PingUrl" Title="Ping nuoroda" Width="200px">
                <EditTemplate Context="webService">
                    <RadzenTextBox @bind-Value="@webService.PingUrl" Style="width:100%" />
                </EditTemplate>
            </RadzenGridColumn>
            <RadzenGridColumn TItem="WebService" Property="ResponseTime" Title="Atsakymo laikas" Width="130px">
                <EditTemplate Context="webService">
                    <Radzen.Blazor.RadzenNumeric @bind-Value="@webService.ResponseTime" Style="width:100%" />
                </EditTemplate>
            </RadzenGridColumn>
            <RadzenGridColumn TItem="WebService" Property="Cost" Title="Kaina" Width="80px">
                <EditTemplate Context="webService">
                    <Radzen.Blazor.RadzenNumeric @bind-Value="@webService.Cost" Style="width:100%" />
                </EditTemplate>
            </RadzenGridColumn>
            <RadzenGridColumn TItem="WebService" Property="Availability" Title="Prieinamumas" Width="120px">
                <EditTemplate Context="WebService">
                    <Radzen.Blazor.RadzenNumeric @bind-Value="@WebService.Availability" Min="0" Max="100" Style="width:100%" />
                </EditTemplate>
            </RadzenGridColumn>
            <RadzenGridColumn TItem="WebService" Property="SuccessRate" Title="Pasisekimas" Width="120px">
                <EditTemplate Context="webService">
                    <Radzen.Blazor.RadzenNumeric @bind-Value="@webService.SuccessRate" Min="1" Max="10" Style="width:100%" />
                </EditTemplate>
            </RadzenGridColumn>
            <RadzenGridColumn TItem="WebService" Property="Reputation" Title="Patikimumas" Width="120px">
                <EditTemplate Context="webService">
                    <Radzen.Blazor.RadzenNumeric @bind-Value="@webService.Reputation" Min="1" Max="10" Style="width:100%" />
                </EditTemplate>
            </RadzenGridColumn>
            <RadzenGridColumn TItem="WebService" Title="Balas" Width="90px">
                <Template Context="webService">
                    @webService.GetQoSScore()
                </Template>
            </RadzenGridColumn>
            <RadzenGridColumn TItem="WebService" Title="Redaguoti" Bubble="false" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="95px">
                <Template Context="webService">
                    <RadzenButton Icon="edit" Size="ButtonSize.Small" Click="@(args => EditRow(webService))">
                    </RadzenButton>
                </Template>
                <EditTemplate Context="webService">
                    <RadzenButton Icon="save" Size="ButtonSize.Small" Click="@((args) => SaveRow(webService))">
                    </RadzenButton>
                    <RadzenButton Icon="cancel" Size="ButtonSize.Small" ButtonStyle="ButtonStyle.Secondary" Click="@((args) => CancelEdit(webService))">
                    </RadzenButton>
                </EditTemplate>
            </RadzenGridColumn>
            <RadzenGridColumn TItem="WebService" Title="Pašalinti" Context="webService" Bubble="false" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="95px">
                <Template Context="webService">
                    <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="close" Size="ButtonSize.Small" Click="@(args => DeleteRow(webService))">
                    </RadzenButton>
                </Template>
                <EditTemplate Context="webService">
                    <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="close" Size="ButtonSize.Small" Click="@(args => DeleteRow(webService))">
                    </RadzenButton>
                </EditTemplate>
            </RadzenGridColumn>
        </Columns>
    </RadzenGrid>
</div>
@code {
    RadzenGrid<WebService> grid;
    RadzenGrid<WebServiceQoSParameter> QoSGrid;
    IList<WebService> webServices;
    IList<WebServiceQoS> webServiceQoS;
    bool isBusy;

    WebService _currentWebService;
    //object currentWebService
    //{
    //    get
    //    {
    //        return _currentWebService;
    //    }

    //    set
    //    {
    //        if (_currentWebService != value)
    //        {
    //            _currentWebService = value as WebService;
    //            StateHasChanged();
    //        }
    //    }
    //}

    IEnumerable<KeyValuePair<WebServiceTypeEnum, string>> _webServiceTypes;

    protected override async Task OnInitializedAsync()
    {
        isBusy = true;
        var webServicesResult = await _webServiceService.GetAsync();
        if(webServicesResult.ResponseType == ErrorTypeEnum.Success)
        {
            webServices = webServicesResult.Content.ToList();
        }

        _webServiceTypes = Enum.GetValues(typeof(WebServiceTypeEnum)).Cast<WebServiceTypeEnum>().Select(x => new KeyValuePair<WebServiceTypeEnum, string>(x, EnumHelpers.GetDisplayName(x))).ToList();

        var webServiceQoSResult = await _webServiceService.GetQoSParametersAsync();
        if (webServiceQoSResult.ResponseType == ErrorTypeEnum.Success)
        {
            webServiceQoS = webServiceQoSResult.Content.ToList();
        }

        isBusy = false;

        await InvokeAsync(StateHasChanged);
    }

    protected override void OnAfterRender(bool firstRender)
    {
        //Work around for column visibility
        if (firstRender)
        {
            InvokeAsync(StateHasChanged);
        }
    }

    //Edit methods

    void EditRow(WebService webService)
    {
        grid.EditRow(webService);
    }

    void EditQoSRow(WebServiceQoSParameter qoSParameter)
    {
        QoSGrid.EditRow(qoSParameter);
    }

    async void OnUpdateRow(WebService webService)
    {
        isBusy = true;
        await _webServiceService.UpdateAsync(webService);
        isBusy = false;
    }

    void SaveRow(WebService webService)
    {
        if (webServices.Contains(webService))
            OnUpdateRow(webService);
        else
            OnCreateRow(webService);

        CancelEdit(webService);
    }

    void CancelEdit(WebService webService)
    {
        grid.CancelEditRow(webService);
    }

    void CancelQoSEdit(WebServiceQoSParameter qoSParameter)
    {
        QoSGrid.CancelEditRow(qoSParameter);
    }

    async void DeleteRow(WebService webService)
    {
        if (webServices.Contains(webService))
        {
            isBusy = true;
            await _webServiceService.DeleteAsync(webService);
            isBusy = false;

            grid.Reload();
        }
        else
        {
            grid.CancelEditRow(webService);
        }
    }

    void DeleteQoSRow(WebServiceQoSParameter qoSParameter)
    {
        if (_currentWebService.QoSParameters.Contains(qoSParameter))
        {
            _currentWebService.QoSParameters.Remove(qoSParameter);
            OnUpdateRow(_currentWebService);
            QoSGrid.Reload();
        }
        else
        {
            QoSGrid.CancelEditRow(qoSParameter);
        }
    }

    void InsertRow()
    {
        grid.InsertRow(new WebService());
    }

    void InsertQoSRow()
    {
        var newParameter = new WebServiceQoSParameter()
        {
            WebServiceId = _currentWebService.Id,
            WebServiceType = _currentWebService.Type
        };

        _currentWebService.QoSParameters.Add(newParameter);

        QoSGrid.Reload();
        QoSGrid.EditRow(newParameter);
    }

    async void OnCreateRow(WebService webService)
    {
        isBusy = true;
        await _webServiceService.InsertAsync(webService);
        isBusy = false;
    }

    bool GetDefaultColumnVisibility(string columnName)
    {
        return columnName == "Nuoroda" || columnName == "Ping nuoroda" ? false : true;
    }
}
